package gcm

// THIS IS AUTOGENERATED BLAH BLAH BLAH ...

import (
	"errors"
	"fmt"
	{{ range .Imports -}}
	"{{ . }}"
	{{ end -}}
)

{{ range .Providers }} 
type {{ .TypeNamePrefix }}Provider interface {
	Value() ({{ .Type }}, error)
}

type {{ .TypeNamePrefix }}ProviderFunc func() ({{ .Type }}, error)

func (f {{ .TypeNamePrefix }}ProviderFunc) Value() ({{ .Type }}, error) {
	return f()
}

type Multi{{ .TypeNamePrefix }}Provider []{{ .TypeNamePrefix }}Provider

func (m Multi{{ .TypeNamePrefix }}Provider) Value() ({{ .Type }}, error) {
	for _, p := range m {
		{{ .Variable }}, err := p.Value()
		if err != nil {
			if errors.Is(err, ValueNotProvidedError) {
				continue
			}

			return {{ .ZeroValue }}, err
		}

		return {{ .Variable }}, nil
	}

	return {{ .ZeroValue }}, ValueNotProvidedError
}

func Static{{ .TypeNamePrefix }}({{ .Variable }} {{ .Type }}) {{ .TypeNamePrefix }}Provider {
	return {{ .TypeNamePrefix }}ProviderFunc(func() ({{ .Type }}, error) {
		return {{ .Variable }}, nil
	})
}

func OptionalStatic{{ .TypeNamePrefix }}({{ .Variable }} *{{ .Type }}) {{ .TypeNamePrefix }}Provider {
	if {{ .Variable }} != nil {
		return Static{{ .TypeNamePrefix }}(*{{ .Variable }})
	}

	return {{ .TypeNamePrefix }}ProviderFunc(func() ({{ .Type }}, error) {
		return {{ .ZeroValue }}, ValueNotProvidedError
	})
}

type {{ .TypeNamePrefix }}Validator func({{ .Variable }} {{ .Type }}) error

{{ if .ValidateInSet }}
func Validate{{ .TypeNamePrefix }}InSet(values ...{{ .Type }}) {{ .TypeNamePrefix }}Validator {
	set := make(map[{{ .Type }}]struct{}, len(values))
	for _, v := range values {
		set[v] = struct{}{}
	}

	return {{ .TypeNamePrefix }}Validator(func(v {{ .Type }}) error {
		if _, ok := set[v]; !ok {
			printable := make([]string, 0, len(set))
			for v := range set {
				printable = append(printable, fmt.Sprintf("%v", v))
			}

			return fmt.Errorf("{{ .Type }} %v is not in set %v", v, printable)
		}

		return nil
	})
}
{{ end }}

{{ if .ValidateBetween }}
func Validate{{ .TypeNamePrefix }}Between(lower, upper {{ .Type }}) {{ .TypeNamePrefix }}Validator {
	if lower > upper {
		panic(fmt.Sprintf("invalid validator: lower value %v is greater than upper value %v", lower, upper))
	}

	return {{ .TypeNamePrefix }}Validator(func(v {{ .Type }}) error {
		switch {
		case v < lower:
			return fmt.Errorf("%v is below lower limit %v", v, lower)
		case v > upper:
			return fmt.Errorf("%v is above upper limit %v", v, upper)
		default:
			return nil
		}
	})
}
{{ end }}

type {{ .TypeNamePrefix }}ProviderSchema struct {
	Default       {{ .Type }}
	DefaultIsZero bool
	Validate      {{ .TypeNamePrefix }}Validator
	Provider      {{ .TypeNamePrefix }}Provider
}

func (schema *{{ .TypeNamePrefix }}ProviderSchema) Value() (interface{}, error) {
	v, err := schema.Provider.Value()
	if err != nil {
		if !errors.Is(err, ValueNotProvidedError) {
			return nil, fmt.Errorf("{{ .TypeNamePrefix }}ProviderSchema: %w", err)
		}

		if schema.Default == {{ .ZeroValue }} && !schema.DefaultIsZero {
			return nil, fmt.Errorf("{{ .TypeNamePrefix }}ProviderSchema: %w", ValueNotProvidedError)
		}

		v = schema.Default
	}

	if schema.Validate != nil {
		if err := schema.Validate(v); err != nil {
			return nil, fmt.Errorf("{{ .TypeNamePrefix }}ProviderSchema: %w", NewValidationError(err, v))
		}
	}

	return v, nil
}
{{end}}
